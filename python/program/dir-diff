#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
2018-09-26_12:40:09 Sergey Pakhomov <pahomov@swemel.ru>

Модуль сравнивает указанные директории. Выводит общие файлы и уникальные
файлы для каждой из директорий
"""


import argparse
import logging
import logging.config
import os
import sys


def init_logger():
    """
    Initialize logger
    """

    loggin_config = {
        'version': 1,
        'formatters': {
            'default': {
                'format': '[%(asctime)s][%(levelname)9s]: %(message)s'
            },
        },
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
                'formatter': 'default',
            },
            'file': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'formatter': 'default',
                'filename': 'out1.log',
                # 'mode': 'w',
                # 'encoding': 'utf-8',
            },
        },
        'root': {
            'level': 'DEBUG',
            'handlers': ['console', 'file']
        },
    }

    logging.config.dictConfig(loggin_config)


def test():
    """
    Simple docsting test
    """
    import doctest
    doctest.testmod()


def list_files(path):
    res = set()
    for root, dirs, files in os.walk(path, topdown=False):
        for name in files:
            path = '/'.join(os.path.join(root, name).split('/')[1:])
            logging.debug(path)
            logging.debug(os.path.join(root, name))
            res.add(path)

    return res


def main():
    """
    Start point
    """

    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--first", dest="first_path", default="",
                        help="First path for comparison")
    parser.add_argument("-s", "--second", dest="second_path", default="",
                        help="Second path for comparison")
    args = parser.parse_args()
    if not (args.first_path and args.second_path):
        sys.exit(-1)

    first_files = list_files(args.first_path)
    second_files = list_files(args.second_path)

    logging.info("First path unique files:")
    logging.info(first_files - second_files)
    logging.info("Second path unique files:")
    logging.info(second_files - first_files)
    logging.info("Same files:")
    logging.info(second_files.intersection(first_files))


if __name__ == "__main__":
    # test()
    init_logger()
    logging.info('Started')
    main()
    logging.info('Finished')
